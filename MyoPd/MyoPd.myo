-- This script is able to comyunicate to Integra Live the Myo Armband data.
-- The script has been created by Balandino Di Donato. Please visit his official website: www.balandinodidonato.com.

-- This is free and unencumbered software released into the public domain.
-- Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.

-- In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the
-- software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.

-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-- For more information, please refer to <http://unlicense.org/>

scriptId = 'com.balandinodidonato.Pd' -- define the script ID
scriptTitle = "MyoPd" -- define the script title
scriptDetailsUrl = ""    

    noteAccelleration = {1, 2, 3} -- PureData will receive the Accelaration X, Y, Z values trough the objects [ctlin 1], [ctlin 2] and [ctlin 3]
    noteGyro = {4, 5, 6} -- PureData will receive the Gyro X, Y, Z values trough the objects [ctlin 4], [ctlin 5] and [ctlin 6]
    noteOrientation = {7, 8, 9} -- PureData will receive the Orientation X, Y, Z values trough the objects [ctlin 7], [ctlin 8] and [ctlin 9]
    noteYawPitchRoll = {10, 11, 12} -- PureData will receive the Yaw, Pitch and Roll values trough the objects [ctlin 10], [ctlin 11] and [ctlin 12]
    notePose = {13, 14, 15, 16, 17, 18, 19} -- Pure data will receive the pose values trough the objects [ctlin 13], [ctlin 14], [ctlin 4], [ctlin 15], [ctlin 16], [ctlin 17], [ctlin 18] and [ctlin 19].

    Pose = {0, 0, 0, 0, 0, 0, 0} -- Triggered pose: rest, fist, waveIn, waveOut, fingersSpread, doubleTap, 
    velocityPose = {0, 0, 0, 0, 0, 0, 0} -- Pose value scaled in MIDI values.

function onPoseEdge(pose, edge) -- Pose trigger
    myo.debug("onPoseEdge: " .. pose .. ", " .. edge) -- print out, debug function  
    if pose == "rest" then
          Pose = {1, 0, 0, 0, 0, 0, 0}
          velocityPose = {127, 0, 0, 0, 0, 0, 0}
        
        elseif pose == "fist" then
            Pose = {0, 1, 0, 0, 0, 0, 0} 
            velocityPose = {0, 127, 0, 0, 0, 0, 0}
        
        elseif pose == "waveIn" then
            Pose = {0, 0, 1, 0, 0, 0, 0}
            velocityPose = {0, 0, 127, 0, 0, 0, 0}
        
        elseif pose == "waveOut" then
            Pose = {0, 0, 0, 1, 0, 0, 0}
            velocityPose = {0, 0, 0, 127, 0, 0, 0}
                
        elseif pose == "fingersSpread" then
            Pose = {0, 0, 0, 0, 1, 0, 0}
            velocityPose = {0, 0, 0, 0, 127, 0, 0}
                
        elseif pose == "doubleTap" then
            Pose = {0, 0, 0, 0, 0, 1, 0}
            velocityPose = {0, 0, 0, 0, 127, 0, 0}
                
        elseif pose == "unknown" then
            Pose = {0, 0, 0, 0, 0, 0, 1}
            velocityPose = {0, 0, 0, 0, 0, 0, 127}
         end
end

function sendMidiValues() -- sendMidiValue() send MIDI values to IntegraLive --      
    accelerationX, accelerationY, accelerationZ  = myo.getAccel() -- Get the acceleration of Myo in the world reference frame in units of g. World reference frame values are such that the X and Y axes are parallel to the ground while the Z axis faces up, perpendicular to the ground. Returns: Acceleration of Myo in the world reference frame. (Returns 3 values). Delimit return values as follows: x,y,z = myo.getAccel().                                                                                         
    direction = myo.getXDirection() -- Provides the orientation of Myo on the wearer's arm. The value represents the direction in which the positive X axis of Myo's coordinate system faces. Returns "towardWrist" if Myo's positive X axis is facing the wearer's wrist, "towardElbow" if Myo's positive X axis is facing the wearer's elbow, "unknown" if unknown.                                                                                                                                                
    gyroX, gyroY, gyroZ = myo.getGyro() -- Get the angular velocity of Myo about its axes, in radians / second. Returns: Angular velocity of Myo about its X, Y and Z axes. (Returns 3 values). Delimit return values as follows: x,y,z = myo.getGyro().                                                                                        
    yaw = myo.getYaw() -- Get an angular value for Myo's orientation about its Z axis. Positive yaw indicates rotation to the wearer's right. Returns Myo "yaw" value, in radians.                                                                                     
    orientationX, orientationY, orientationZ = myo.getOrientationWorld() -- Get a unit vector representing the direction Myo is facing in the world reference frame. X and Y axes are parallel to the ground, while the Z axis faces up, perpendicular to the ground. Returns Unit vector representing Myo's orientation. (Returns 3 values). Delimit return values as follows: x,y,z = myo.getOrientationWorld().                                                                                                             
     pitch = myo.getPitch() -- Get an angular value for Myo's orientation about its Y axis. Positive pitch indicates the wearer moving their arm upwards, away from the ground. Returns: Myo "pitch" value, in radians.                                                                                              
    roll = myo.getRoll() -- Get an angular value for Myo's orientation about its X axis, i.e. the wearer's arm. Positive roll indicates clockwise rotation (from the point of view of the wearer). Returns Myo "roll" value, in radians.                                                                                         
    
    -- Resize Myo data values into MIDI value to control the velocity of the MIDI controlChange                           
    velocityAccelerationX =  math.floor((accelerationX/3)*127)
    velocityAccelerationY = math.floor((accelerationY/3)*127)
    velocityAccelerationZ = math.floor((accelerationZ/3)*127)
    velocityGyroX = math.floor((gyroX/2000)*127)
    velocityGyroY = math.floor((gyroY/2000)*127)
    velocityGyroZ = math.floor((gyroZ/2000)*127)
    velocityOrientationX = math.floor(((orientationX+1)*0.5)*127)
    velocityOrientationY = math.floor(((orientationY+1)*0.5)*127)
    velocityOrientationZ = math.floor(((orientationZ+1)*0.5)*127)
    velocityYaw = math.floor(((yaw+3.14)/6.28)*127)
    velocityPitch = math.floor(((pitch+1.5)*42.33333333333333))
    velocityRoll = math.floor(((roll+3.14)/6.28)*127)
        
    -- Generation of MIDI message 
    myo.midi(0, "controlChange", noteAccelleration[1], velocityAccelerationX)
    myo.midi(0, "controlChange", noteAccelleration[2], velocityAccelerationY)
    myo.midi(0, "controlChange", noteAccelleration[3], velocityAccelerationZ)
    myo.midi(0, "controlChange", noteGyro[1], velocityGyroX)
    myo.midi(0, "controlChange", noteGyro[2], velocityGyroY)
    myo.midi(0, "controlChange", noteGyro[3], velocityGyroZ)
    myo.midi(0, "controlChange", noteOrientation[1], velocityOrientationX)
    myo.midi(0, "controlChange", noteOrientation[2], velocityOrientationY)
    myo.midi(0, "controlChange", noteOrientation[3], velocityOrientationZ)
    myo.midi(0, "controlChange", noteYawPitchRoll[1], velocityYaw)
    myo.midi(0, "controlChange", noteYawPitchRoll[2], velocityPitch)
    myo.midi(0, "controlChange", noteYawPitchRoll[3], velocityRoll)
    myo.midi(0, "controlChange", notePose[1], velocityPose[1])  
    myo.midi(0, "controlChange", notePose[2], velocityPose[2])  
    myo.midi(0, "controlChange", notePose[3], velocityPose[3])
    myo.midi(0, "controlChange", notePose[4], velocityPose[4])
    myo.midi(0, "controlChange", notePose[5], velocityPose[5])
    myo.midi(0, "controlChange", notePose[6], velocityPose[6])
    myo.midi(0, "controlChange", notePose[7], velocityPose[7])

    -- print out, debug function
    myo.debug("" .. noteAccelleration[1] .. " - Accel X:  " .. accelerationX .. " - MIDI: " .. velocityAccelerationX)
    myo.debug("" .. noteAccelleration[2] .. "  - Accel Y:  " .. accelerationY .. " - MIDI: " .. velocityAccelerationY)
    myo.debug("" .. noteAccelleration[3] .. "  - Accel Z:  " .. accelerationZ .. " - MIDI: " .. velocityAccelerationZ)
    myo.debug("" .. noteGyro[1] .. " - GyroX X:  " .. gyroX .. " - MIDI: " .. velocityGyroX)
    myo.debug("" .. noteGyro[2] .. " - GyroX Y:  " .. gyroY .. " - MIDI: " .. velocityGyroY)
    myo.debug("" .. noteGyro[3] .. "  - GyroX Z:  " .. gyroZ .. " - MIDI: " .. velocityGyroZ)
    myo.debug("" .. noteOrientation[1] .. " - Orient X: " .. orientationX .. " - MIDI: " .. velocityOrientationX)
    myo.debug("" .. noteOrientation[2] .. " - Orient Y: " .. orientationY .. " - MIDI: " .. velocityOrientationY)
    myo.debug("" .. noteOrientation[3] .. " - Orient Z: " .. orientationZ .. " - MIDI: " .. velocityOrientationZ)
    myo.debug("" .. noteYawPitchRoll[1] .. " - Yaw:      " .. yaw .. " - MIDI: " .. velocityYaw)
    myo.debug("" .. noteYawPitchRoll[2] ..  " - Pitch:    " ..pitch.. " - MIDI: " .. velocityPitch) 
    myo.debug("" .. noteYawPitchRoll[3] ..   " - Roll:     " ..roll..  "  - MIDI: " .. velocityRoll)
    myo.debug("" .. notePose[1] ..   " - Rest:     " ..Pose[1].."  - MIDI: " .. velocityPose[1]) 
    myo.debug("" .. notePose[2] ..   " - Fist:     " ..Pose[2].."  - MIDI: " .. velocityPose[2])  
    myo.debug("" .. notePose[3] .. " - Wave In:  " ..Pose[3].."  - MIDI: " .. velocityPose[3])   
    myo.debug("" .. notePose[4] .." - Wave Out: " ..Pose[4].."  - MIDI: " .. velocityPose[4]) 
    myo.debug("" .. notePose[5] .." - Fingers Spread: " ..Pose[5].."  - MIDI: " .. velocityPose[5])
    myo.debug("" .. notePose[6] .." - Double Tap: "..Pose[6].."  - MIDI: " .. velocityPose[6])
    myo.debug("" .. notePose[7] .." - Unknown:  " ..Pose[7].. "  - MIDI: " .. velocityPose[7])
end

function onPeriodic() -- call the function sendMidiValues every 10 milliseconds
    sendMidiValues()
end

function onForegroundWindowChange(app, title)     -- Here we decide if we want to control the new active app.
    local wantActive = false
    activeApp = ""
    if platform == "MacOS" or platform == "Windows" then
        myo.debug("onForegroundWindowChange: " .. app .. ", " .. title)
        if app == "org.puredata" then
            myo.unlock("hold")
            wantActive = true
            activeApp = "Pd"
            myo.debug("Pd has been hooked!")
        elseif app == "org.puredata.pd.wish" then
            myo.unlock("hold")
            wantActive = true
            activeApp = "Pd"
            myo.debug("Pd has been hooked!")  
        end
    else 
        myo.debug("onForegroundWindowChange: " .. app .. ", " .. title)
        myo.debug("Please, click into a Pd Window")
        myo.lock()
    end
    return wantActive
end

function activeAppName()     -- Return the active app name determined in onForegroundWindowChange.
    return activeApp
end